params {
    /* Input and output options */
    genomes = "data/*.fa"          // input genomes (FASTA format)
    outdir = "./results"           // output directory
    
    /* CheckM options */
    reduced_tree = false           // reduce the memory requirements to approximately 14 GB

    /* Filtering options */
    min_completeness = 50          // discard sequences with less than 50% completeness
    max_contamination = 10         // discard sequences with more than 10% contamination

    /* Dereplication options */
    skip_dereplication = false     // skip the dereplication step
    ani_thr = 0.95 // > 0.90       // ANI threshold for dereplication (> 0.90)
    min_overlap = 0.30             // minimum aligned fraction

    /* Limits */
    max_cpus = 16
    max_memory = 64.GB
    max_time = 96.h
}

/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'Assessing the quality of prokaryotic genomes'
    mainScript = 'main.nf'
    version = '1.0.0'
}


/* Functions */

def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
