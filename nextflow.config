params {
    /* Input and output options */
    genomes = "data/*.fa"      // input genomes (FASTA format)
    ext = "fa"                 // input files extension
    outdir = "./results"       // output directory
    
    /* CheckM options */
    reduced_tree = false       // reduce the memory requirements to approximately 14 GB,
                               // set "max_memory" to 16.GB                     
    
    /* GUNC options */
    gunc_db = "none"           // GUNC database ('none': download the database,
                               // internet connection required)
    
    /* Filtering options */
    min_completeness = 50      // discard genomes with less than 50% completeness
    max_contamination = 10     // discard genomes with more than 10% contamination
    gunc_filter = true         // if true discard genomes that do not pass the GUNC filter

    /* Dereplication options */
    skip_dereplication = false // skip the dereplication step
    ani_thr = 0.95             // ANI threshold for dereplication (> 0.90)
    min_overlap = 0.30         // minimum aligned fraction

    /* Batch options */
    checkm_batch_size = 1000   // run CheckM on "checkm_batch_size" genomes at once,
                               // see https://github.com/Ecogenomics/CheckM/issues/118
    gunc_batch_size = 100      // run GUNC on "gunc_batch_size" genomes at once

    /* Limits */
    max_cpus = 8
    max_memory = 70.GB
    max_time = 96.h
}


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'Assessing the quality of prokaryotic genomes'
    mainScript = 'main.nf'
    version = '1.2.1'
}


/* Functions */

def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
